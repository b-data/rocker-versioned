image: docker
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  R_VERSION: "4.2.0"
  UPDATE_MODE: "false"

before_script:
  - >
    echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER
    --password-stdin $CI_REGISTRY
  - >
    export VERSION_MAJ_MIN_PAT=$R_VERSION
    
    export VERSION_MAJ_MIN=`echo $VERSION_MAJ_MIN_PAT |
    sed -n "s|\([[:digit:]]\+\.[[:digit:]]\+\).*|\1|p"`
    
    export VERSION_MAJ=`echo $VERSION_MAJ_MIN_PAT |
    sed -n "s|\([[:digit:]]\+\).*|\1|p"`

build-latest:
  stage: build
  script:
    - >
      docker build --pull
      --build-arg R_VERSION
      --build-arg NCPUS=$((`nproc`/2+1))
      -t $CI_REGISTRY_IMAGE:latest
      -t $CI_REGISTRY_IMAGE:$VERSION_MAJ_MIN_PAT
      -t $CI_REGISTRY_IMAGE:$VERSION_MAJ_MIN
      -t $CI_REGISTRY_IMAGE:$VERSION_MAJ
      -f geospatial/latest.Dockerfile .
    - docker push -a $CI_REGISTRY_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $UPDATE_MODE != "true"
      changes:
        - geospatial/latest.Dockerfile

build-version:
  stage: build
  script:
    - >
      docker build --pull
      --build-arg R_VERSION
      --build-arg NCPUS=$((`nproc`/2+1))
      -t $CI_REGISTRY_IMAGE:$VERSION_MAJ_MIN_PAT
      -f geospatial/$R_VERSION.Dockerfile .
    - docker push -a $CI_REGISTRY_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == "freeze-version" && $CI_PIPELINE_TRIGGERED
      changes:
        - geospatial/$R_VERSION.Dockerfile
